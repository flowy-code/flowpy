[project]
name = "flowpy"
version = "0.0.1"
description = "Python bindings for flowy"
authors = [
    {name = "Amrita Goswami", email = "amrita16thaug646@gmail.com"},
    {name = "Moritz Sallermann", email = "moritzsallermann@gmail.com"},

]

dependencies = [
    "numpy>=1.26.4",
    "pybind11>=2.12.0",
]
requires-python = ">=3.9"
readme = "README.md"
license = {text = "GPL v3"}

[build-system]
# These are all that are seen by pip install .
requires = ["pybind11", "meson-python", "numpy"]
build-backend = "mesonpy"
# Important, tells pip how to install the package
[tool.meson-python.args]
setup = [
'-Dwrap_mode=forcefallback',
# ^-- collects subprojects, see https://github.com/ERGO-Code/HiGHS/pull/1343#discussion_r1252446966
]
# Skip during installation to prevent local RPATH stripping issues
# See: https://github.com/mesonbuild/meson-python/discussions/410
install = ['--skip-subprojects']
# Include so auditwheel on the CI can correctly generate wheels
# See: https://github.com/ERGO-Code/HiGHS/pull/1343/files
dist = ['--include-subprojects']

[tool.cibuildwheel]
build = "*"
test-command = "pytest {project}/tests"
test-skip = ["*universal2:arm64"]
test-requires = "pytest"
build-verbosity = 1

# TODO(rg): Needs an equivalent on windows, use an override
before-all = [
    # Versions
    "XTL_VERSION='0.7.7'",
    "XTENSOR_VERSION='0.25.0'",
    "XTENSOR_BLAS_VERSION='0.21.0'",
    "XTENSOR_PYTHON_VERSION='0.27.0'",
    "NETCDF_VERSION='4.9.0'",
    "FMT_VERSION='10.2.1'",
    "COMMON_CMAKE='-DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE -DBUILD_SHARED_LIBS=OFF'",
    # Some of these are easiest obtained via pip and then set
    "PYTHON_SITEPKGS=$(python -c 'import site; print(site.getsitepackages()[0])')",

    # Grab and install fmt
    "curl -L https://github.com/fmtlib/fmt/archive/refs/tags/${FMT_VERSION}.tar.gz | tar -xzC /tmp --transform 's|fmt-[^/]*|build-fmt|'",
    "cmake -S /tmp/build-fmt -B /tmp/build-fmt/build -DFMT_TEST=OFF ${COMMON_CMAKE}",
    "cmake --build /tmp/build-fmt/build --target install",
    "rm -rf /tmp/build-fmt",

    # TODO(rg): Probably worthwhile to grab xsimd
    # Grab and install xtl
    "curl -L https://github.com/xtensor-stack/xtl/archive/refs/tags/${XTL_VERSION}.tar.gz | tar -xzC /tmp --transform 's|xtl-[^/]*|build-xtl|'",
    "cmake -S /tmp/build-xtl -B /tmp/build-xtl/build ${COMMON_CMAKE}",
    "cmake --build /tmp/build-xtl/build --target install",
    "rm -rf /tmp/build-xtl",

    # Grab and install xtensor
    "curl -L https://github.com/xtensor-stack/xtensor/archive/refs/tags/${XTENSOR_VERSION}.tar.gz | tar -xzC /tmp --transform 's|xtensor-[^/]*|build-xtensor|'",
    "cmake -S /tmp/build-xtensor -B /tmp/build-xtensor/build ${COMMON_CMAKE}",
    "cmake --build /tmp/build-xtensor/build --target install",
    "rm -rf /tmp/build-xtensor",

    # Grab and install xtensor-blas from HaoZeke's fork
    # Replace with upstream after https://github.com/xtensor-stack/xtensor-blas/pull/243
    # Also remove -DVERSION then, when a tagged release is used
    "curl -L https://github.com/HaoZeke/xtensor-blas/archive/refs/heads/addPkgConfig.tar.gz | tar -xzC /tmp --transform 's|xtensor-blas-[^/]*|build-xtblas|'",
    "cmake -S /tmp/build-xtblas -B /tmp/build-xtblas/build -DVERSION=${XTENSOR_BLAS_VERSION} ${COMMON_CMAKE}",
    "cmake --build /tmp/build-xtblas/build --target install",
    "rm -rf /tmp/build-xtblas",

    # xtensor-python needs these
    "pip install pybind11 numpy",
    "export CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:${PYTHON_SITEPKGS}",
    # Grab and install xtensor-python from HaoZeke's fork
    # Replace with upstream after https://github.com/xtensor-stack/xtensor-python/pull/243
    "curl -L https://github.com/HaoZeke/xtensor-python/archive/refs/heads/addPkgConfig.tar.gz | tar -xzC /tmp --transform 's|xtensor-python-[^/]*|build-xtpy|'",
    "cmake -S /tmp/build-xtpy -B /tmp/build-xtpy/build ${COMMON_CMAKE}",
    "cmake --build /tmp/build-xtpy/build --target install",
    "rm -rf /tmp/build-xtpy",
    "unset CMAKE_PREFIX_PATH",

    # Build static NetCDF library
    "curl -L https://github.com/Unidata/netcdf-c/archive/refs/tags/v${NETCDF_VERSION}.tar.gz | tar -xzC /tmp",
    "mkdir /tmp/build-netcdf",
    "if [ $(getconf LONG_BIT) -ge 64 ]; then CDF5_OPTION='-DENABLE_CDF5=ON'; else CDF5_OPTION='-DENABLE_CDF5=OFF'; fi",
    # Options partially kanged from https://github.com/muSpectre/muGrid/blob/main/pyproject.toml
    "cmake -S /tmp/netcdf-c-${NETCDF_VERSION} -B /tmp/build-netcdf ${COMMON_CMAKE} ${CDF5_OPTION} -DBUILD_TESTING=OFF -DBUILD_TESTSETS=OFF -DBUILD_UTILITIES=OFF -DENABLE_DAP=OFF -DENABLE_NETCDF4=OFF -DENABLE_NETCDF_4=OFF -DENABLE_PLUGINS=OFF",
    "cmake --build /tmp/build-netcdf --target install",
    "rm -rf /tmp/build-netcdf /tmp/netcdf-c-${NETCDF_VERSION}"
]

[tool.cibuildwheel.linux]
manylinux-x86_64-image = "manylinux2014"
manylinux-i686-image = "manylinux2014"
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
archs = ["x86_64 arm64"]
environment = { RUNNER_OS="macOS" }
repair-wheel-command = [
  "delocate-listdeps {wheel}",
  "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}",
]


# [tool.cibuildwheel.windows]
# before-build = "pip install delvewheel"
# repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"
